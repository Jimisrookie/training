1. 运行globalfifo
进入~/develop/training/kernel/drivers/globalfifo/ch12，加载
sudo insmod globalfifo-dev.ko
sudo insmod globalfifo.ko
后，/dev/下面会自动创建/dev/globalfifo节点：
baohua@baohua-VirtualBox:~/develop/training/kernel/drivers/globalfifo/ch12$ ls -l /dev/globalfifo 
crw------- 1 root root 10, 54  4月 12 14:28 /dev/globalfifo
在一个终端：
sudo cat /dev/globalfifo 
在另外一个终端：
$ sudo sh -c 'echo hello > /dev/globalfifo'
[sudo] password for baohua: 

观察前一个cat的终端，分析代码

2. signalio
在一个终端运行：
~/develop/training/kernel/drivers/globalfifo/ch12$ sudo ../ch9/globalfifo_test 
...

在另外一个终端：
sudo sh -c 'echo hello > /dev/globalfifo'

分析globalfifo_test中打印的
receive a signal from globalfifo,signalnum:29

分析~/develop/training/kernel/drivers/globalfifo/ch9/globalfifo_test.c程序

3. 修改pcduino3的dts
在~/develop/pcduino/kernel/arch/arm/boot/dts/sun7i-a20-pcduino3-nano.dts中disable gmac节点：
diff --git a/arch/arm/boot/dts/sun7i-a20-pcduino3-nano.dts b/arch/arm/boot/dts/sun7i-a20-pcduino3-nano.dts
index 1757a6a..8d6d2def 100644
--- a/arch/arm/boot/dts/sun7i-a20-pcduino3-nano.dts
+++ b/arch/arm/boot/dts/sun7i-a20-pcduino3-nano.dts
@@ -99,7 +99,7 @@
        pinctrl-0 = <&gmac_pins_rgmii_a>;
        phy = <&phy1>;
        phy-mode = "rgmii";
-       status = "okay";
+       status = "disabled";
 
        phy1: ethernet-phy@1 {
                reg = <1>;

重新编译内核，烧卡，看看板子的网卡还能不能用。

4.使用JTAG和GDB调试内核
use qemu-system-arm with "-s -S", and use arm gdb to debug embedded kernel

shell1:
~/develop/linux/extra/ run-nolcd.sh or run-lcd.sh
before running, add -s -S in the script.

shell2:
cd ~/develop/linux
arm-linux-gnueabihf-gdb vmlinux
# target remote :1234

5. 反汇编dtb
dtc -I dtb -O dts -o nano.dts sun7i-a20-pcduino3-nano.dtb
观察nano.dts
把它和原生态的sun7i-a20-pcduino3-nano.dts进行对比

6. printk
hello module init
在hello.c最开头添加pr_fmt的定义：
#define pr_fmt(fmt)        "hello: " fmt

在module init和exit函数里面，加一些打印
pr_err("%s: ERROR\n", __func__);
pr_info("%s: INFO\n", __func__);
pr_warn("%s: WARN\n", __func__);

在板子上echo 不同的数字，如2,3,4,5,6,7到/proc/sys/kernel/printk,
modprobe hello和rmmod hello，看打印变化。

7. kernel oops
进入~/develop/pcduino/kernel/drivers/misc，把globalfifo代码拷贝过来：
baohua@baohua-VirtualBox:~/develop/pcduino/kernel/drivers/misc$ cp ~/develop/training/kernel/drivers/globalfifo/ch12/globalfifo.c .
baohua@baohua-VirtualBox:~/develop/pcduino/kernel/drivers/misc$ cp ~/develop/training/kernel/drivers/globalfifo/ch12/globalfifo-dev.c .

修改drivers/misc下的Makefile，强行添加globalfifo-dev和globalfifo为module:
obj-m           += globalfifo.o
obj-m           += globalfifo-dev.o


在globalfifo.c里面干这样的坏事：
static ssize_t globalfifo_read(struct file *filp, char __user *buf,
                               size_t count, loff_t *ppos)
{
        int ret;
        struct globalfifo_dev *dev = container_of(filp->private_data,
                struct globalfifo_dev, miscdev);

+        int *p=0;
+        *p=100;


在电路板上用globalfifo：
root@pcduino3:~# modprobe globalfifo-dev
root@pcduino3:~# modprobe globalfifo    
root@pcduino3:~# cat /dev/globalfifo 
[  189.410000] Unable to handle kernel NULL pointer dereference at virtual address 00000000
[  189.420000] pgd = edc90000
[  189.420000] [00000000] *pgd=6dd6f831, *pte=00000000, *ppte=00000000
[  189.430000] Internal error: Oops: 817 [#1] SMP ARM
[  189.430000] Modules linked in: globalfifo globalfifo_dev [last unloaded: hello]
[  189.440000] CPU: 1 PID: 314 Comm: cat Not tainted 4.4.0 #31

arm-linux-gnueabi-objdump反汇编分析哪句C语言引起的oops



